@model pittools.Models.Category

@{
    ViewBag.Title = string.Format("{0} | {1}", Model.Name, pittools.Constants.TITLE);
}

<p>
    @Html.ActionLink("На главную", "Index", "Home")
    @pittools.Constants.BREADCRUMBS_SEPARATOR
    @Model.Name
</p>

<h2>@Model.Name</h2>

@if (Request.IsAuthenticated && (User.IsInRole(pittools.Constants.ROLE_ADMIN) || User.IsInRole(pittools.Constants.ROLE_CONTENT_MANAGER)))
{
    <p>@Html.ActionLink("Редактировать", "Edit", new { id = Model.ID })&nbsp;&nbsp;&nbsp;@Html.ActionLink("Удалить", "Delete", new { id = Model.ID })</p>
}

@functions
{
    public string Row(ref int index)
    {
        string strResult = "<tr>";

        for (int innerIndex = 0; innerIndex < pittools.Constants.COLLECTION_NUMBER_PER_ROW; innerIndex++)
        {
            strResult += "<td style='text-align:center; padding-bottom:20px;'>";

            if (index < Model.Collections.Count())
            {
                var obj = Model.Collections.OrderByDescending(item => item.Sequence).Skip(index).Take(1).First();
                string strImage = "0.jpg";
                if (!string.IsNullOrWhiteSpace(obj.ImageExt)) { strImage = obj.ID.ToString() + obj.ImageExt.TrimEnd() + "?" + DateTime.Now.ToString(); }
                strResult += string.Format("<a href='{0}'><img src='{1}/{2}/{3}' alt='{4}' /></a>", Url.Action("GetCollectionInCategory", "Collection", new { category = obj.Category.ShortName, collection = obj.ShortName }), Url.Content("~/Content"), pittools.Constants.COLLECTION_MINI_IMAGES_FOLDER, strImage, obj.Name);
                strResult += "<br />";

                strResult += Html.ActionLink(obj.Name, "GetCollectionInCategory", "Collection", new { category = obj.Category.ShortName, collection = obj.ShortName }, null);

                if (Request.IsAuthenticated && (User.IsInRole(pittools.Constants.ROLE_ADMIN) || User.IsInRole(pittools.Constants.ROLE_CONTENT_MANAGER)))
                {
                    strResult += "<br />";
                    strResult += Html.ActionLink("<- Вверх", "Up", "Collection", new { id = obj.ID }, null);
                    strResult += "&nbsp;&nbsp;&nbsp;";
                    strResult += Html.ActionLink("Вниз ->", "Down", "Collection", new { id = obj.ID }, null);
                }
            }

            strResult += "</td>";

            index = index + 1;
        }

        strResult += "</tr>";

        return strResult;
    }
    public string RowProducts(ref int index)
    {
        string strResult = "<tr>";

        for (int innerIndex = 0; innerIndex < pittools.Constants.PRODUCT_NUMBER_IN_ROW; innerIndex++)
        {
            strResult += "<td st yle='text-align:center; padding-bottom:20px;'>";

            if (index < Model.CategoryProducts.Count())
            {
                var obj = Model.CategoryProducts.OrderByDescending(item => item.Sequence).Skip(index).Take(1).First();
                string strImage = "0.jpg";
                if (!string.IsNullOrWhiteSpace(obj.Product.ImageExt)) { strImage = obj.Product.ID.ToString() + obj.Product.ImageExt.TrimEnd() + "?" + DateTime.Now.ToString(); }
                strResult += string.Format("<a href='{0}'><img src='{1}/{2}/{3}/{4}' alt='{5}' /></a>", Url.Action("GetProductInCategory", "Product", new { category = obj.Category.ShortName, product = obj.Product.ShortName }), Url.Content("~/Content"), pittools.Constants.PRODUCT_IMAGES_FOLDER, pittools.Constants.PRODUCT_IMAGES_MINI_FOLDER, strImage, obj.Product.Name);
                strResult += "<br />";

                strResult += Html.ActionLink(obj.Product.Name, "GetProductInCategory", "Product", new { category = obj.Category.ShortName, product = obj.Product.ShortName }, null);

                if (Request.IsAuthenticated && (User.IsInRole(pittools.Constants.ROLE_ADMIN) || User.IsInRole(pittools.Constants.ROLE_CONTENT_MANAGER)))
                {
                    strResult += "<br />";
                    strResult += Html.ActionLink("<- Вверх", "Up", "CategoryProduct", new { id = obj.ID }, null);
                    strResult += "&nbsp;&nbsp;&nbsp;";
                    strResult += Html.ActionLink("Вниз ->", "Down", "CategoryProduct", new { id = obj.ID }, null);
                }
            }

            strResult += "</td>";

            index = index + 1;
        }

        strResult += "</tr>";

        return strResult;
    }
}

<table style="width:100%">
    @{
        int iCount = Model.Collections.Count;
        int i = 0;

        while (i < iCount)
        {
            @MvcHtmlString.Create(Row(ref i))
        }
    }
</table>

<table style="width:100%">
    @{
        int iCategoryProductsCount = Model.CategoryProducts.Count;
        int iCategoryProductIndex = 0;

        while (iCategoryProductIndex < iCategoryProductsCount)
        {
            @MvcHtmlString.Create(RowProducts(ref iCategoryProductIndex))
        }
    }
</table>

@if (Request.IsAuthenticated && (User.IsInRole(pittools.Constants.ROLE_ADMIN) || User.IsInRole(pittools.Constants.ROLE_CONTENT_MANAGER)))
{
    <h2>Мини-изображение на главной странице</h2>

    using (Html.BeginForm("UploadCatalogImage", "Category", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.Hidden("objID", Model.ID)

        <table>
            <tr>
                <td>
                    @{
                        string filename = string.Empty;
                        if (string.IsNullOrWhiteSpace(Model.ImageExt)) { filename = "0.jpg"; }
                        else { filename = string.Format("{0}{1}?{2}", Model.ID, Model.ImageExt.TrimEnd(), DateTime.Now); }
                    }
                    <img src='@(Url.Content("~/Content"))/@(pittools.Constants.CATEGORY_MINI_IMAGES_FOLDER)/@(filename)' alt='@Model.Name' />
                </td>
                <td style="padding-left:20px">
                    <input type="file" name="imagefile" />
                    <br />
                    <input type="submit" value="Загрузить" />
                </td>
            </tr>
        </table>
    }
}